(ns app.model.item
  (:require [com.wsscode.pathom.connect :as pc]
            [clojure.java.jdbc :as jdbc]
            [clojure.string :as str]
            [clojure.set :as set]
            [edn-query-language.core :as eql]))

(def items (atom {1 {:item/id       1
                     :item/title    "A thing"
                     :item/in-stock 3
                     :item/price    1022.33M}}))

(pc/defresolver item-resolver [env {:item/keys [id]}]
  {::pc/input  #{:item/id}
   ::pc/output [:item/title :item/in-stock :item/price {:item/category [:category/id]}]}
  (get @items id))

(pc/defresolver all-items-resolver [_ _]
  {::pc/output [:item/all-items]}
  {:item/all-items (->> items deref vals (sort-by :item/id) vec)})

(pc/defmutation set-item-price [env {:item/keys [id price]}]
  {::pc/params [:item/id :item/price]
   ::pc/output [:item/id]}
  (when-not (decimal? price)
    (throw (ex-info "API INVARIANT VOILATED!" {:item/price "must be decimal"})))
  (swap! items assoc-in [id :item/price] price)
  {:item-id id})

(def resolvers [item-resolver all-items-resolver set-item-price])



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Demo of converting a Form diff to SQL Database Interaction
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn ->snake_case [s] (str/replace s #"-" "_"))
(defn entity-key->snake_case [k] (some-> k name ->snake_case keyword))
(defn id-key->join-column [k] (some-> k namespace ->snake_case (str "_id") keyword))

(defn entity->set-map [e]
  (reduce-kv (fn [m k v]
               (let [k (if (eql/ident? v) (id-key->join-column (first v)) k)
                     v (if (eql/ident? v) (second v) v)]
                 (assoc m (entity-key->snake_case k) v)))
    {} e))

(defn form-diff->updates
  [diff]
  (for [idnt (keys diff)
        :let [[id-key id] idnt
              [table-name id-column] [(keyword (namespace id-key)) (name id-key)]
              set-map      (entity->set-map (get diff idnt))
              where-clause [(str id-column " = ?") id]]]
    [table-name set-map where-clause]))


(comment
  (def db {:dbtype "h2:mem" :dbname "demo"})

  (jdbc/execute! db ["CREATE TABLE category
                      (id int generated by default as identity,
                      name varchar(100))"])

  (jdbc/execute! db ["CREATE TABLE item
                      (id int generated by default as identity,
                       title varchar(100),
                       price decimal(20,2),
                       in_stock int default 0,
                       category_id int not null references category(id))"])

  (jdbc/insert! db :category {:id 1 :name "Tools"})
  (jdbc/insert! db :category {:id 2 :name "Food"})
  (jdbc/insert! db :item {:title "Wrench" :price 22.4M :in_stock 22 :category_id 1})
  (jdbc/insert! db :item {:title "Soda" :price 1.99M :in_stock 103 :category_id 2})

  (jdbc/update! db :item {:title "Adjustable Wrench"} ["id = ?" 1])

  (jdbc/get-by-id db :item 1)

  (jdbc/query db ["SELECT i.title, i.price, c.id as category_id, c.name AS category
                   FROM item i
                   LEFT JOIN category c ON c.id = i.category_id"])

  (jdbc/query db ["SELECT * FROM category"])



  (jdbc/execute! db ["DROP TABLE item"])
  (jdbc/execute! db ["DROP TABLE category"])


  (id-key->join-column :item-category/id)
  (entity-key->snake_case :item/price)

  (form-diff->updates {[:item/id 22]    {:item/title    "New Title"
                                         :item/price    32M
                                         :item/category [:category/id 1]}
                       [:category/id 1] {:category/name "New Name"}})

  )
